//1.Класс кота из прошлого ДЗ расширить функционалом потребления пищи. У каждого кота есть аппетит, т.е. количество еды, которое он съедает за один раз;
//2. Кот должен есть из миски. Создайте такую сущность, которая будет обладать объёмом и едой в ней, а также методами наполнения и получения информации о количестве еды;
//3. Метод из первого пункта ДЗ должен взаимодействовать с миской, т.е., конкретный кот ест из конкретной миски, уменьшая объём еды в ней;
//4. Предусмотрите проверку, при которой в миске не может получиться отрицательного количества еды (например, в миске 10 единиц еды, а кот пытается съесть 15);
//5. Каждому коту нужно добавить поле сытость (когда создаем котов, они голодны). Если коту удалось поесть (хватило еды), сытость = true;
//Считаем, что если коту мало еды в тарелке, то он её просто не трогает, то есть не может быть наполовину сыт (это сделано для упрощения логики программы);
//6. Создать массив котов и одну тарелку с едой, попросить всех котов покушать из этой тарелки и потом вывести информацию о сытости котов в консоль;
//7. Когда еда в тарелке кончается, нужно оповещать об этом и наполнять её едой.



public class AnimalDemo {
    public static void main(String[] args) {

        Cat[] arrayCat = new Cat[5];

        Plate plate = new Plate(25, 25);

        //создаем котов

        for (int i = 0; i < arrayCat.length; i++) {
            arrayCat[i] = new Cat("Cat " + i, 5 + i);
        }
        //кормим котов

        for (Cat cat : arrayCat) {
            cat.eat(plate);
        }

        //выводим статус котов

        for (Cat cat : arrayCat) {
            if (cat.isCatHungry()) {
                System.out.println(cat.name + " голоден");
            } else {
                System.out.println(cat.name + " сыт");
            }
        }


    }
}